// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using CoreFoundation;
using Utilities;

namespace Evacuation
{
	public partial class viewMoving : NSViewController
	{
        bool PauseQueue = false;
        bool Moving = true;

		HypTable.DataSource hypDS = new HypTable.DataSource();
		VmTable.DataSource vmDS = new VmTable.DataSource();

		private Queue<VirtualMachine> MoveQueue = new Queue<VirtualMachine>();

		public viewMoving (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            tblDestHyps.DataSource = hypDS;
            tblDestHyps.Delegate = new HypTable.Delegate(hypDS);

            tblSourceVms.DataSource = vmDS;
            tblSourceVms.Delegate = new VmTable.Delegate(vmDS);

            lblSource.StringValue = ViewState.SourceHyp.HostName;
            new Thread(() =>
            {
                Reload();
				EvacuateHyp();
			}).Start();
            new Thread(() => UpdateProgress()).Start();
		}

        private void Reload()
        {
            lblStatus.Set("Refreshing Hypervisor/VM Info...");
            RefreshData();
            lblStatus.Set("Hypervisor/VM Info Loaded...");
		}

        private void RefreshData()
        {
            ViewState.SourceHyp.Vms.Clear();
			Parallel.Invoke(
				() => ViewState.SourceHyp.LoadSourceHyp(),
                () => { Parallel.ForEach(ViewState.DestHyps, hyp =>	{ hyp.LoadDestHyp();});
            }
			);
			hypDS.Hyps.Clear();
			hypDS.Hyps.AddRange(ViewState.DestHyps);
			hypDS.Hyps.Sort();

			vmDS.Vms.Clear();
			vmDS.Vms.AddRange(ViewState.SourceHyp.Vms);
			this.BeginInvokeOnMainThread(() =>
			{
				tblDestHyps.ReloadData();
				tblSourceVms.ReloadData();
			});
		}

		private Hypervisor ChooseDest(VirtualMachine VM)
		{
            List<Hypervisor> destList = new List<Hypervisor>();
			destList.AddRange(ViewState.DestHyps.Where(x => x.MemoryFree > VM.Memory));
            return destList
                    .OrderBy(x => x.GetHostgroupCount(VM.HostGroup))
                    .ThenByDescending(x => (Math.Floor(x.DiskFree * 2) / 2))
                    .ThenByDescending(x => x.CoresRemaining)
                    .ThenByDescending(x => x.MemoryFree).First();
		}

        private void UpdateProgress()
        {
            prgMove.Range(0,1);
            while (Moving)
            {
                prgMove.Set(ViewState.SourceHyp.GetProgress());
                Thread.Sleep(2000);
            }
        }

        private void EvacuateHyp()
        {
			while (ViewState.SourceHyp.Vms.Count > 0)
            {
                lblStatus.Set("Queueing work... " + vmDS.Vms.Count() + " vms");
				MoveQueue = new Queue<VirtualMachine>(ViewState.SourceHyp.Vms);

                while (MoveQueue.Count() != 0)
                {
                    if (PauseQueue) lblStatus.Set("Paused...");
                    while (PauseQueue) {Thread.Sleep(2000);}
                    var curVm = MoveQueue.Dequeue();
                    var dstHyp = ChooseDest(curVm);
                    lblStatus.Set("Moving " + curVm.Name + " to " + dstHyp.HostName + " - Queue Length = " + MoveQueue.Count());
					prgMove.Hide(false);
                    var mover = new HypMover(){SourceHyp = ViewState.SourceHyp.HostName, DestHyp = dstHyp.HostName, VMUUID = curVm.UUID};
                    foreach (var netInfo in curVm.Networks) mover.VIFtoDstNetwork.Add(netInfo.VifUUID, dstHyp.NetworkByVlan[netInfo.VlanID]);
                    mover.MoveVM();
                    prgMove.Hide();
                    lblStatus.Set("Refreshing Hypervisor/VM Info...");
                    RefreshData();
                }
            }

            lblStatus.Set("Work completed!");
            btnStartNewHost.Hide(false);
            btnStartNewPod.Hide(false);
            Moving = false;
        }

		public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue(segue, sender);

            // Take action based on Segue ID
			switch (segue.Identifier)
			{
				case "ReturnSelectHyp": case "ReturnSelectPod":
                    ((NSWindowController)this.View.Window.WindowController).Close();
					break;
			}
		}

        partial void cmdPauseQueue(NSObject sender)
        {
            PauseQueue = !PauseQueue;
            btnPauseQueue.Title = PauseQueue ? "Resume Queue" : "Pause Queue";
        }
	}
}
